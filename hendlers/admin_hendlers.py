from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database.user import User
from config import db
from database.service import Service
from database.queueEntry import QueueEntry
from keyboards.admin_keyboards import admin_keyboard

from states.admin_states import AdminStates

admin_router = Router()

@admin_router.message(Command('start'))
async def start_handler(msg:Message):
    u1 = User(msg.from_user.id,msg.from_user.username,msg.from_user.full_name, db)
    user = await u1.get_user()
    if not user:
        await u1.save()
    
    if await u1.check_status():
        await msg.answer('Hello admin', reply_markup=admin_keyboard)
    else:
        from keyboards.user_keyboards import user_keyboard
        await msg.answer('–ü—Ä–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Ç —Ç–≤–æ–µ –º–µ–Ω—é:', reply_markup=user_keyboard)

@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
async def add_service_text_handler(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: –°—Ç—Ä–∏–∂–∫–∞, 30, 1500")
    await state.set_state(AdminStates.waiting_for_service_info)

@admin_router.message(AdminStates.waiting_for_service_info)
async def get_service_info(message: Message, state: FSMContext):
    try:
        name, duration, price = message.text.split(",")
        service = Service(name.strip(), int(duration.strip()), int(price.strip()), db)
        await service.save()
        await message.answer("–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ ‚ùå")
    await state.clear()

@admin_router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏")
async def view_services_text_handler(message: Message):
    services = await Service("", 0, 0, db).get_all()
    if services:
        msg = "\n".join([f"{s['id']}. {s['name']} ‚Äì {s['duration']} –º–∏–Ω ‚Äì {s['price']}‚ÇΩ" for s in services])
        await message.answer(f"–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n{msg}")
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.")

@admin_router.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å")
async def view_queue_text_handler(message: Message):
    entries = await QueueEntry(db=db).get_all()
    if entries:
        msg = "\n".join([f"ID: {e['id']}, –£—Å–ª—É–≥–∞: {e['service']}, –í—Ä–µ–º—è: {e['scheduled_time']}" for e in entries])
        await message.answer(f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n{msg}")
    else:
        await message.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

@admin_router.message(F.text == "üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def view_users_text_handler(message: Message):
    users = await db.pool.fetch("SELECT telegram_id, username FROM users")
    if users:
        msg = "\n".join([f"{u['telegram_id']} ‚Äî @{u['username']}" for u in users])
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{msg}")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
