from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import db
from database.user import User
from database.service import Service
from database.queueEntry import QueueEntry
from keyboards.user_keyboards import user_keyboard, cancel_queue_kb
from keyboards.admin_keyboards import admin_keyboard
from states.user_states import UserStates

user_router = Router()

@user_router.message(Command("start"))
async def register_user(message: Message):
    
    user_data = await db.pool.fetchrow("SELECT * FROM users WHERE telegram_id=$1", message.from_user.id)

    if not user_data:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            fullname=message.from_user.full_name,
            db=db
        )
        await user.save()
        user_data = await db.pool.fetchrow("SELECT * FROM users WHERE telegram_id=$1", message.from_user.id)

    
    if user_data["is_staff"]:
        await message.answer("–í—ã –∞–¥–º–∏–Ω ‚úÖ", reply_markup=admin_keyboard)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§", reply_markup=user_keyboard)


@user_router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏")
async def view_services(message: Message):
    services = await Service("", 0, 0, db).get_all()
    if services:
        msg = "\n".join([f"{s['id']}. {s['name']} ‚Äì {s['duration']} –º–∏–Ω ‚Äì {s['price']}‚ÇΩ" for s in services])
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n{msg}")
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")


@user_router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å")
async def join_queue(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—Å–ª—É–≥–∏ –∏ –¥–∞—Ç—É (YYYY-MM-DD):\n–ü—Ä–∏–º–µ—Ä: 2, 2025-09-01")
    await state.set_state(UserStates.waiting_for_queue_data)


@user_router.message(UserStates.waiting_for_queue_data)
async def process_queue_data(message: Message, state: FSMContext):
    try:
        service_id, date_str = message.text.split(",")
        service_data = await Service("", 0, 0, db).get_by_id(int(service_id.strip()))
        if not service_data:
            await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return

        user_data = await db.pool.fetchrow("SELECT id FROM users WHERE telegram_id=$1", message.from_user.id)
        if not user_data:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.clear()
            return

        queue_entry = QueueEntry(
            user_id=user_data["id"],
            service=service_data["name"],
            scheduled_time=date_str.strip(),
            db=db
        )
        await queue_entry.save()
        await message.answer("–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
    await state.clear()


@user_router.message(F.text == "üìÖ –ú–æ—è –æ—á–µ—Ä–µ–¥—å")
async def my_queue(message: Message):
    user_data = await db.pool.fetchrow("SELECT id FROM users WHERE telegram_id=$1", message.from_user.id)
    if not user_data:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    entry = await QueueEntry(user_id=user_data["id"], db=db).get_user_active_entry()
    if entry:
        await message.answer(
            f"–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏:\n–£—Å–ª—É–≥–∞: {entry['service']}\n–î–∞—Ç–∞: {entry['scheduled_time']}\n–°—Ç–∞—Ç—É—Å: {entry['status']}",
            reply_markup=cancel_queue_kb()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")


@user_router.callback_query(F.data == "cancel_my_entry")
async def cancel_entry(callback: CallbackQuery):
    user_data = await db.pool.fetchrow("SELECT id FROM users WHERE telegram_id=$1", callback.from_user.id)
    if not user_data:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    await QueueEntry(user_id=user_data["id"], db=db).cancel_user_entry()
    await callback.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
